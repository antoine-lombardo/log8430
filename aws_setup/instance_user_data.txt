Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config
cloud_final_modules:
- [scripts-user, always]

--//
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata.txt"

#!/bin/bash


# ------------------ #
# Create directories #
# ------------------ #
mkdir /results
mkdir /shared
chmod -R 757 /results
chmod -R 757 /shared


# -------------------- #
# Install requirements #
# -------------------- #
apt update
apt install python2 default-jdk maven apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release -y
ln -s /bin/python2.7 /usr/bin/python
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt update
apt install docker-ce docker-compose-plugin -y
usermod -aG docker ubuntu


# ------------- #
# Download YCSB #
# ------------- #
cd /shared
curl -O --location https://github.com/brianfrankcooper/YCSB/releases/download/0.17.0/ycsb-0.17.0.tar.gz
tar xfvz ycsb-0.17.0.tar.gz


# -------------------------------------- #
# Create the MongoDB Docker Compose file #
# -------------------------------------- #
printf "
version: \"3.8\"
services:
  mongo1:
    image: mongo:5
    container_name: mongo1
    command: [\"--replSet\", \"my-replica-set\", \"--bind_ip_all\", \"--port\", \"30001\"]
    volumes:
      - ./data/mongo-1:/data/db
    ports:
      - 30001:30001
    healthcheck:
      test: test \$\$(echo \"rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\\\\\"mongo1:30001\\\\\"},{_id:1,host:\\\\\"mongo2:30002\\\\\"},{_id:2,host:\\\\\"mongo3:30003\\\\\"}]}).ok || rs.status().ok\" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s
  mongo2:
    image: mongo:5
    container_name: mongo2
    command: [\"--replSet\", \"my-replica-set\", \"--bind_ip_all\", \"--port\", \"30002\"]
    volumes:
      - ./data/mongo-2:/data/db
    ports:
      - 30002:30002
  mongo3:
    image: mongo:5
    container_name: mongo3
    command: [\"--replSet\", \"my-replica-set\", \"--bind_ip_all\", \"--port\", \"30003\"]
    volumes:
      - ./data/mongo-3:/data/db
    ports:
      - 30003:30003
" > docker-compose-mongodb.yml




# ------------------------------------ #
# Create the Redis Docker Compose file #
# ------------------------------------ #
printf "
version: '2'
services:
  redis-node-0:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-0:/bitnami/redis/data
    ports:
      - '6379:6379'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
  redis-node-1:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-1:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
  redis-node-2:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-2:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
  redis-node-3:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-3:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
  redis-node-4:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-4:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
  redis-node-5:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-5:/bitnami/redis/data
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - 'REDISCLI_AUTH=bitnami'
      - 'REDIS_CLUSTER_REPLICAS=1'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'REDIS_CLUSTER_CREATOR=yes'
volumes:
  redis-cluster_data-0:
    driver: local
  redis-cluster_data-1:
    driver: local
  redis-cluster_data-2:
    driver: local
  redis-cluster_data-3:
    driver: local
  redis-cluster_data-4:
    driver: local
  redis-cluster_data-5:
    driver: local
" > docker-compose-redis.yml


--//